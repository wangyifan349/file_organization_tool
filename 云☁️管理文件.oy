import os
import shutil
import re
from flask import Flask, request, jsonify, send_from_directory, abort, Response, render_template_string
import markdown

app = Flask(__name__)

# 根目录：存放所有文件
BASE_DIR = os.path.abspath('files')
if not os.path.exists(BASE_DIR):
    os.makedirs(BASE_DIR)

def secure_path(rel_path: str) -> str:
    """
    转换并规范化用户传入的相对路径为绝对路径，
    确保不允许路径穿越(BASE_DIR外)
    """
    rel_path = rel_path.strip('/\\')
    full_path = os.path.normpath(os.path.join(BASE_DIR, rel_path))
    if not full_path.startswith(BASE_DIR):
        abort(400, "非法路径")
    return full_path

def clean_filename(filename: str) -> str:
    """
    仅清理文件名中路径分隔符和控制字符，
    保留中文及常见字符。
    """
    filename = filename.strip()
    filename = filename.replace('/', '').replace('\\', '')
    filename = re.sub(r'[\x00-\x1f\x7f]', '', filename)
    if not filename:
        filename = 'unnamed'
    return filename

@app.route('/')
def index():
    """
    主页面，前端使用Bootstrap，美观且交互完整。
    路由返回内嵌HTML+JS页面，详细注释。
    """
    html = '''<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <title>文件管理器</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <style>
    body { padding: 1rem; }
    #file-list li { cursor: pointer; user-select: none; }
    #file-list li span { margin-left: 6px; }
    #file-list li.directory::before { content: "📁 "; }
    #file-list li.file::before { content: "📄 "; }
    #file-list li.video::before { content: "🎥 "; }
    #file-list li:hover { background-color: #f4f4f4; }
    .context-menu {
      position: absolute;
      background: white;
      border: 1px solid #ccc;
      box-shadow: 1px 1px 8px rgba(0,0,0,0.15);
      display: none;
      z-index: 1050;
      min-width: 150px;
    }
    .context-menu ul {
      list-style: none;
      padding: 0.25rem 0;
      margin: 0;
    }
    .context-menu ul li {
      padding: 0.3rem 1rem;
      cursor: pointer;
      user-select: none;
    }
    .context-menu ul li:hover {
      background-color: #eee;
    }
    #editor-modal .modal-dialog {
      max-width: 900px;
    }
    #md-preview {
      border: 1px solid #ddd;
      max-height: 300px;
      overflow-y: auto;
      padding: 0.5rem;
      background: #f9f9f9;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>

  <nav class="d-flex align-items-center mb-3">
    <button id="btn-up" class="btn btn-secondary btn-sm me-2" disabled>⬆️ 上级目录</button>
    <h5 id="current-path" class="m-0 flex-grow-1">/</h5>
  </nav>

  <ul id="file-list" class="list-group"></ul>

  <!-- 右键菜单，针对文件夹和文件 -->
  <div id="context-menu" class="context-menu shadow">
    <ul>
      <li id="cm-download">下载</li>
      <li id="cm-rename">重命名</li>
      <li id="cm-delete">删除</li>
    </ul>
  </div>

  <!-- 空白区域右键菜单（上传文件，新建文件夹） -->
  <div id="blank-context-menu" class="context-menu shadow">
    <ul>
      <li id="cm-upload">上传文件</li>
      <li id="cm-mkdir">新建文件夹</li>
    </ul>
  </div>

  <!-- 上传文件input -->
  <input type="file" id="upload-input" style="display:none" />

  <!-- 编辑Modal -->
  <div class="modal fade" id="editor-modal" tabindex="-1" aria-labelledby="editor-label" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editor-label">编辑文件</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body d-flex flex-column gap-3">
          <textarea id="editor-textarea" class="form-control" rows="10" spellcheck="false"></textarea>
          <div id="md-preview" class="d-none"></div>
          <video id="video-player" class="w-100 d-none" controls></video>
        </div>
        <div class="modal-footer">
          <button id="btn-save" class="btn btn-primary">保存</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
        </div>
      </div>
    </div>
  </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script>
(() => {
  const BASE_API = '/api';
  let currentPath = '';
  let contextTarget = null;  // 右键目标元素li

  const fileList = document.getElementById('file-list');
  const currentPathEl = document.getElementById('current-path');
  const btnUp = document.getElementById('btn-up');
  const contextMenu = document.getElementById('context-menu');
  const cmDownload = document.getElementById('cm-download');
  const cmRename = document.getElementById('cm-rename');
  const cmDelete = document.getElementById('cm-delete');

  const blankContextMenu = document.getElementById('blank-context-menu');
  const cmUpload = document.getElementById('cm-upload');
  const cmMkdir = document.getElementById('cm-mkdir');

  const uploadInput = document.getElementById('upload-input');

  const editorModalElm = document.getElementById('editor-modal');
  const editorTextarea = document.getElementById('editor-textarea');
  const mdPreview = document.getElementById('md-preview');
  const videoPlayer = document.getElementById('video-player');
  const btnSave = document.getElementById('btn-save');
  const bsModal = new bootstrap.Modal(editorModalElm);

  let editingFile = null; // 当前编辑文件完整路径(相对 BASE_DIR)
  let editingType = null; // 编辑文件类型 md/txt/video/null

  // 判断文件类型判断
  function isVideoFile(name){
    return ['.mp4','.webm','.ogg'].some(ext => name.toLowerCase().endsWith(ext));
  }
  function isMdFile(name){
    return name.toLowerCase().endsWith('.md');
  }
  function isTxtFile(name){
    const n = name.toLowerCase();
    return ['.txt','.log','.ini','.json','.xml','.csv'].some(ext => n.endsWith(ext));
  }

  // 更新路径显示和上级按钮状态
  function updatePathDisplay(){
    currentPathEl.textContent = '/' + currentPath;
    btnUp.disabled = (currentPath === '');
  }

  // 加载目录内容并显示
  async function loadDir(path){
    currentPath = path || '';
    updatePathDisplay();
    fileList.innerHTML = '';
    try {
      const res = await fetch(`${BASE_API}/list?path=${encodeURIComponent(currentPath)}`);
      const data = await res.json();
      if(!data.success){
        alert('加载目录失败:'+data.error);
        return;
      }
      // 目录先显示
      data.directories.forEach(d=>{
        const li = createListItem(d, true);
        fileList.appendChild(li);
      });
      // 文件后显示
      data.files.forEach(f=>{
        const li = createListItem(f, false);
        fileList.appendChild(li);
      });
    } catch(e){
      alert('请求异常:'+e.message);
    }
  }

  // 创建列表项 li，目录 or 文件，绑定dataset存路径和类型
  function createListItem(name, isDir){
    const li = document.createElement('li');
    li.className = 'list-group-item d-flex align-items-center';
    li.dataset.name = name; // 纯文件名
    li.dataset.path = currentPath ? currentPath + '/' + name : name; // 传给后端的相对路径
    li.dataset.type = isDir ? 'directory' : 'file';

    let spanIcon = document.createElement('span');
    spanIcon.className = isDir ? 'directory' : (isVideoFile(name) ? 'video' : 'file');
    spanIcon.style.userSelect = 'none';
    spanIcon.textContent = isDir ? '📁 ' : (isVideoFile(name) ? '🎥 ' : '📄 ');
    let spanName = document.createElement('span');
    spanName.textContent = name;

    li.appendChild(spanIcon);
    li.appendChild(spanName);
    return li;
  }

  // 打开文件或进入文件夹
  async function openFile(item){
    editingFile = item.dataset.path;
    editingType = null;

    // 重置编辑器UI
    mdPreview.classList.add('d-none');
    videoPlayer.classList.add('d-none');
    editorTextarea.classList.remove('d-none');

    if(item.dataset.type === 'directory'){
      // 点击目录，进入目录
      currentPath = item.dataset.path;
      loadDir(currentPath);
      return;
    }

    if(item.dataset.type === 'file'){
      const name = item.dataset.name.toLowerCase();
      if(isMdFile(name)){
        // Markdown文件，读内容，显示Markdown编辑+HTML预览
        editingType = 'md';
        editorTextarea.value = '';
        mdPreview.innerHTML = '';
        mdPreview.classList.remove('d-none');
        let res = await fetch(`${BASE_API}/md/read?path=${encodeURIComponent(editingFile)}`);
        let data = await res.json();
        if(!data.success){
          alert('读取Markdown失败：' + data.error);
          return;
        }
        editorTextarea.value = data.content;
        mdPreview.innerHTML = data.html;
        // 实时渲染markdown
        editorTextarea.oninput = () => {
          mdPreview.innerHTML = marked.parse(editorTextarea.value);
        };
        bsModal.show();
      } else if (isTxtFile(name)){
        // 文本文件，只显示文本编辑区域
        editingType = 'txt';
        editorTextarea.value = '';
        let res = await fetch(`${BASE_API}/txt/read?path=${encodeURIComponent(editingFile)}`);
        let data = await res.json();
        if(!data.success){
          alert('读取文本失败：' + data.error);
          return;
        }
        editorTextarea.value = data.content;
        bsModal.show();
      } else if (isVideoFile(name)){
        // 视频文件，播放器在线播放
        editingType = 'video';
        editorTextarea.classList.add('d-none');
        mdPreview.classList.add('d-none');
        videoPlayer.classList.remove('d-none');
        videoPlayer.src = `${BASE_API}/video?path=${encodeURIComponent(editingFile)}`;
        bsModal.show();
      } else {
        alert('仅支持在线编辑MD/文本文件和视频播放。');
      }
    }
  }

  // 单击与双击支持：单击目录进入，双击打开文件编辑
  let clickTimer = null;
  fileList.addEventListener('click', e => {
    const li = e.target.closest('li');
    if(!li) return;
    if(clickTimer){
      // 双击，打开文件编辑或视频播放
      clearTimeout(clickTimer);
      clickTimer = null;
      openFile(li);
    } else{
      // 单击，目录进入。文件不用处理单击
      clickTimer = setTimeout(() => {
        clickTimer = null;
        if(li.dataset.type === 'directory'){
          currentPath = li.dataset.path;
          loadDir(currentPath);
        }
      }, 250);
    }
  });

  // ============== 右键菜单 ==============
  // 文件/目录右键菜单
  fileList.addEventListener('contextmenu', e => {
    e.preventDefault();
    hideContextMenu(blankContextMenu);
    const li = e.target.closest('li');
    if(li){
      contextTarget = li;
      // 文件夹无下载功能，禁用下载项
      if (li.dataset.type==='directory'){
        cmDownload.style.display = 'none';
      } else {
        cmDownload.style.display = 'block';
      }
      showContextMenu(contextMenu, e.pageX, e.pageY);
    }
  });
  // 空白区域右键菜单(上传 / 新建文件夹)
  document.body.addEventListener('contextmenu', e => {
    const target = e.target;
    if(!target.closest('#file-list')){
      // 非文件列表区域，显示空白右键菜单
      e.preventDefault();
      hideContextMenu(contextMenu);
      showContextMenu(blankContextMenu, e.pageX, e.pageY);
    }
  });
  // 整体点击后关闭所有右键菜单
  document.body.addEventListener('click', () => {
    hideContextMenu(contextMenu);
    hideContextMenu(blankContextMenu);
  });

  // 显示右键菜单
  function showContextMenu(menu, x, y){
    // 防止菜单超出窗口：简单限制最大坐标
    const maxX = window.innerWidth - menu.offsetWidth;
    const maxY = window.innerHeight - menu.offsetHeight;
    if(x > maxX) x = maxX;
    if(y > maxY) y = maxY;
    menu.style.left = x + 'px';
    menu.style.top = y + 'px';
    menu.style.display = 'block';
  }
  function hideContextMenu(menu){
    if(menu) menu.style.display = 'none';
  }

  // ============== 上级目录按钮 ==============
  btnUp.addEventListener('click', () => {
    if(currentPath === '') return;
    const parts = currentPath.split('/');
    parts.pop();
    currentPath = parts.filter(Boolean).join('/');
    loadDir(currentPath);
  });

  // ============== 右键菜单事件 ==============
  // 下载（只对文件有效）
  cmDownload.onclick = () => {
    if(!contextTarget || contextTarget.dataset.type !== 'file') return;
    const p = contextTarget.dataset.path;
    window.open(`${BASE_API}/download?path=${encodeURIComponent(p)}`);
    hideContextMenu(contextMenu);
  };

  // 重命名
  cmRename.onclick = async () => {
    if(!contextTarget) return;
    const oldPath = contextTarget.dataset.path;
    const oldName = contextTarget.dataset.name;
    let newName = prompt('请输入新名称', oldName);
    if(newName === null) return;
    newName = newName.trim();
    if(!newName){
      alert('名称不能为空');
      return;
    }
    if(newName.includes('/') || newName.includes('\\')){
      alert('名称不能包含路径分隔符');
      return;
    }
    try{
      let res = await fetch(`${BASE_API}/rename`, {
        method:'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({old_path: oldPath, new_name: newName})
      });
      let data = await res.json();
      if(data.success){
        alert('重命名成功');
        loadDir(currentPath);
      } else {
        alert('重命名失败: '+data.error);
      }
    }catch(e){
      alert('请求异常:'+e.message);
    }
    hideContextMenu(contextMenu);
  };

  // 删除
  cmDelete.onclick = async () => {
    if(!contextTarget) return;
    if(!confirm(`确认删除 "${contextTarget.dataset.name}" 吗？此操作不可恢复！`)) return;
    try{
      let res = await fetch(`${BASE_API}/delete`, {
        method:'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({path: contextTarget.dataset.path})
      });
      let data = await res.json();
      if(data.success){
        alert('删除成功');
        loadDir(currentPath);
      } else {
        alert('删除失败：' + data.error);
      }
    }catch(e){
      alert('请求异常:'+e.message);
    }
    hideContextMenu(contextMenu);
  };

  // ============== 空白右键菜单事件 ==============
  // 上传文件
  cmUpload.onclick = () => {
    hideContextMenu(blankContextMenu);
    uploadInput.value = null;
    uploadInput.click();
  };

  // 监听上传选择，支持覆盖提示
  uploadInput.onchange = async () => {
    if(uploadInput.files.length === 0) return;
    const file = uploadInput.files[0];
    // 先检测是否存在同名文件
    try{
      let checkRes = await fetch(`${BASE_API}/list?path=${encodeURIComponent(currentPath)}`);
      let data = await checkRes.json();
      if(!data.success){
        alert('获取目录失败，无法上传');
        return;
      }
      if(data.files.includes(file.name)){
        if(!confirm('目录内已存在同名文件，是否覆盖？')){
          return; // 取消上传
        }
      }
    }catch(e){
      alert('请求异常，无法上传:'+e.message);
      return;
    }
    // 上传
    const formData = new FormData();
    formData.append('file', file);
    formData.append('path', currentPath);
    try{
      let res = await fetch(`${BASE_API}/upload`, {method:'POST', body: formData});
      let data = await res.json();
      if(data.success){
        alert('上传成功');
        loadDir(currentPath);
      } else {
        alert('上传失败: ' + data.error);
      }
    }catch(e){
      alert('上传异常:'+e.message);
    }
  };

  // 新建文件夹
  cmMkdir.onclick = async () => {
    hideContextMenu(blankContextMenu);
    let dirname = prompt('请输入新文件夹名称');
    if(dirname === null) return;
    dirname = dirname.trim();
    if(!dirname){
      alert('名称不能为空');
      return;
    }
    if(dirname.includes('/') || dirname.includes('\\')){
      alert('名称不能包含路径分隔符');
      return;
    }
    try{
      let res = await fetch(`${BASE_API}/mkdir`, {
        method:'POST',
        headers: {'Content-Type':'application/json'},
        body: JSON.stringify({path: currentPath, dirname: dirname})
      });
      let data = await res.json();
      if(data.success){
        alert('创建成功');
        loadDir(currentPath);
      } else {
        alert('创建失败:' + data.error);
      }
    }catch(e){
      alert('请求异常:' + e.message);
    }
  };

  // ============== 编辑器保存功能 ==============
  btnSave.onclick = async () => {
    if(!editingFile || !editingType){
      alert('无编辑内容');
      return;
    }
    const content = editorTextarea.value;
    let url = '';
    let payload = {};
    if(editingType === 'md'){
      url = `${BASE_API}/md/save`;
      payload = {path: editingFile, content: content};
    } else if(editingType === 'txt'){
      url = `${BASE_API}/txt/save`;
      payload = {path: editingFile, content: content};
    } else {
      alert('不支持保存此类型文件');
      return;
    }
    try{
      let res = await fetch(url, {
        method:'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(payload)
      });
      let data = await res.json();
      if(data.success){
        alert('保存成功');
        bsModal.hide();
        loadDir(currentPath);
      } else {
        alert('保存失败: ' + data.error);
      }
    }catch(e){
      alert('保存异常: ' + e.message);
    }
  };

  // 初始化加载根目录
  loadDir('');
})();
</script>
</body>
</html>'''

    return render_template_string(html)

# ----------- 后端API -----------

@app.route('/api/list', methods=['GET'])
def api_list():
    rel_path = request.args.get('path', '').strip('/')
    full_path = secure_path(rel_path)
    if not os.path.isdir(full_path):
        return jsonify({'success': False, 'error': '目录不存在'}), 404
    dirs = []
    files = []
    for entry in os.listdir(full_path):
        p = os.path.join(full_path, entry)
        if os.path.isdir(p):
            dirs.append(entry)
        else:
            files.append(entry)
    return jsonify({'success': True, 'directories': dirs, 'files': files})

@app.route('/api/upload', methods=['POST'])
def api_upload():
    rel_path = request.form.get('path', '').strip('/')
    full_dir = secure_path(rel_path)
    if not os.path.exists(full_dir):
        os.makedirs(full_dir)
    if 'file' not in request.files:
        return jsonify({'success': False, 'error': '缺少文件'}), 400
    file = request.files['file']
    filename = clean_filename(file.filename)
    if not filename:
        return jsonify({'success': False, 'error': '非法文件名'}), 400
    save_path = os.path.join(full_dir, filename)
    # 允许覆盖上传，先删除已有文件
    if os.path.exists(save_path):
        if os.path.isdir(save_path):
            return jsonify({'success': False, 'error': '目标已存在且为目录'}), 400
        try:
            os.remove(save_path)
        except Exception as e:
            return jsonify({'success': False, 'error': f'覆盖失败: {str(e)}'}), 500
    try:
        file.save(save_path)
    except Exception as e:
        return jsonify({'success': False, 'error': f'保存失败: {str(e)}'}), 500
    return jsonify({'success': True})

@app.route('/api/download', methods=['GET'])
def api_download():
    rel_path = request.args.get('path', '').strip('/')
    full_path = secure_path(rel_path)
    if not os.path.isfile(full_path):
        return jsonify({'success': False, 'error': '文件不存在'}), 404
    directory = os.path.dirname(full_path)
    filename = os.path.basename(full_path)
    return send_from_directory(directory, filename, as_attachment=True)

@app.route('/api/delete', methods=['POST'])
def api_delete():
    data = request.json
    if not data or 'path' not in data:
        return jsonify({'success': False, 'error': '参数缺失'}), 400
    rel_path = data['path'].strip('/')
    full_path = secure_path(rel_path)
    if not os.path.exists(full_path):
        return jsonify({'success': False, 'error': '文件或目录不存在'}), 404
    try:
        if os.path.isfile(full_path):
            os.remove(full_path)
        else:
            shutil.rmtree(full_path)
    except Exception as e:
        return jsonify({'success': False, 'error': f'删除失败: {str(e)}'}), 500
    return jsonify({'success': True})

@app.route('/api/rename', methods=['POST'])
def api_rename():
    data = request.json
    if not data or 'old_path' not in data or 'new_name' not in data:
        return jsonify({'success': False, 'error': '参数缺失'}), 400
    old_rel = data['old_path'].strip('/')
    new_name_raw = data['new_name'].strip()
    new_name = clean_filename(new_name_raw)
    if not new_name:
        return jsonify({'success': False, 'error': '非法新名称'}), 400
    old_full = secure_path(old_rel)
    if not os.path.exists(old_full):
        return jsonify({'success': False, 'error': '重命名前文件或目录不存在'}), 404
    new_full = os.path.join(os.path.dirname(old_full), new_name)
    new_full = os.path.normpath(new_full)
    if not new_full.startswith(BASE_DIR):
        return jsonify({'success': False, 'error': '非法重命名目标路径'}), 400
    if os.path.exists(new_full):
        return jsonify({'success': False, 'error': '重命名目标已存在'}), 400
    try:
        os.rename(old_full, new_full)
    except Exception as e:
        return jsonify({'success': False, 'error': f'重命名失败: {str(e)}'}), 500
    return jsonify({'success': True})

@app.route('/api/mkdir', methods=['POST'])
def api_mkdir():
    data = request.json
    if not data or 'path' not in data or 'dirname' not in data:
        return jsonify({'success': False, 'error': '参数缺失'}), 400
    rel_path = data['path'].strip('/')
    dirname_raw = data['dirname'].strip()
    dirname = clean_filename(dirname_raw)
    if not dirname:
        return jsonify({'success': False, 'error': '非法目录名'}), 400
    dir_path = secure_path(rel_path)
    new_dir = os.path.join(dir_path, dirname)
    new_dir = os.path.normpath(new_dir)
    if not new_dir.startswith(BASE_DIR):
        return jsonify({'success': False, 'error': '非法路径'}), 400
    if os.path.exists(new_dir):
        return jsonify({'success': False, 'error': '目录已存在'}), 400
    try:
        os.makedirs(new_dir)
    except Exception as e:
        return jsonify({'success': False, 'error': f'创建目录失败: {str(e)}'}), 500
    return jsonify({'success': True})

@app.route('/api/md/read', methods=['GET'])
def md_read():
    rel_path = request.args.get('path', '').strip('/')
    if not rel_path.lower().endswith('.md'):
        return jsonify({'success': False, 'error': '只能读取Markdown文件'}), 400
    full_path = secure_path(rel_path)
    if not os.path.isfile(full_path):
        return jsonify({'success': False, 'error': 'Markdown文件不存在'}), 404
    with open(full_path, encoding='utf-8') as f:
        content = f.read()
    # 转换为Html，用于预览
    html = markdown.markdown(content, extensions=['fenced_code', 'tables'])
    return jsonify({'success': True, 'content': content, 'html': html})

@app.route('/api/md/save', methods=['POST'])
def md_save():
    data = request.json
    if not data or 'path' not in data or 'content' not in data:
        return jsonify({'success': False, 'error': '参数缺失'}), 400
    rel_path = data['path'].strip('/')
    if not rel_path.lower().endswith('.md'):
        return jsonify({'success': False, 'error': '只能保存Markdown文件'}), 400
    full_path = secure_path(rel_path)
    if not os.path.isfile(full_path):
        return jsonify({'success': False, 'error': '文件不存在'}), 404
    try:
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(data['content'])
    except Exception as e:
        return jsonify({'success': False, 'error': f'保存失败: {str(e)}'}), 500
    return jsonify({'success': True})

@app.route('/api/txt/read', methods=['GET'])
def txt_read():
    rel_path = request.args.get('path', '').strip('/')
    full_path = secure_path(rel_path)
    if not os.path.isfile(full_path):
        return jsonify({'success': False, 'error': '文本文件不存在'}), 404
    with open(full_path, encoding='utf-8') as f:
        content = f.read()
    return jsonify({'success': True, 'content': content})

@app.route('/api/txt/save', methods=['POST'])
def txt_save():
    data = request.json
    if not data or 'path' not in data or 'content' not in data:
        return jsonify({'success': False, 'error': '参数缺失'}), 400
    rel_path = data['path'].strip('/')
    full_path = secure_path(rel_path)
    if not os.path.isfile(full_path):
        return jsonify({'success': False, 'error': '文件不存在'}), 404
    try:
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(data['content'])
    except Exception as e:
        return jsonify({'success': False, 'error': f'保存失败: {str(e)}'}), 500
    return jsonify({'success': True})

@app.route('/api/video', methods=['GET'])
def video_stream():
    rel_path = request.args.get('path', '').strip('/')
    full_path = secure_path(rel_path)
    if not os.path.isfile(full_path):
        return jsonify({'success': False, 'error': '视频文件不存在'}), 404
    range_header = request.headers.get('Range', None)
    file_size = os.path.getsize(full_path)
    start = 0
    end = file_size - 1
    if range_header:
        bytes_range = range_header.strip().lower().split('=')[1]
        ranges = bytes_range.split('-')
        if ranges[0]:
            start = int(ranges[0])
        if len(ranges) > 1 and ranges[1]:
            end = int(ranges[1])
    length = end - start + 1

    def generate():
        with open(full_path, 'rb') as f:
            f.seek(start)
            remaining = length
            chunk_size = 8192
            while remaining > 0:
                read_len = min(chunk_size, remaining)
                data = f.read(read_len)
                if not data:
                    break
                remaining -= len(data)
                yield data

    rv = Response(generate(), status=206 if range_header else 200,
                  mimetype='video/mp4', direct_passthrough=True)
    rv.headers.add('Content-Range', f'bytes {start}-{end}/{file_size}')
    rv.headers.add('Accept-Ranges', 'bytes')
    rv.headers.add('Content-Length', str(length))
    return rv

if __name__ == '__main__':
    app.run(debug=True)
